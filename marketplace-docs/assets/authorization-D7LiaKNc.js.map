{"version":3,"file":"authorization-D7LiaKNc.js","sources":["../../../pages/authorization.mdx"],"sourcesContent":["---\ntitle: \"Авторизація\"\ndescription: \"Налаштування автентифікації та безпеки API\"\n---\n\n# Авторизація\n\nAPI використовує JWT Bearer токени для автентифікації користувачів.\n\n## Отримання токену\n\nТокен отримується після успішної авторизації користувача через систему автентифікації.\n\n### Приклад запиту на авторизацію\n\n```http\nPOST /auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\nВідповідь\njson{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\nВикористання токену\nВ HTTP заголовках\nДодайте токен до заголовку Authorization:\nhttpAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nВ SDK\ntypescriptimport { Configuration, ProductsApi } from 'marketplace-api-client';\n\nconst config = new Configuration({\n  basePath: 'https://marketplace-api.com/v1',\n  accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n});\n\nconst api = new ProductsApi(config);\nДинамічне оновлення токену\ntypescript// Оновлення токену в існуючій конфігурації\nconfig.accessToken = 'новий-jwt-токен';\n\n// Або створення нової конфігурації\nconst newConfig = new Configuration({\n  basePath: 'https://marketplace-api.com/v1',\n  accessToken: 'новий-jwt-токен'\n});\nБезпека\nЗберігання токенів\n\nНЕ зберігайте токени в localStorage у веб-додатках\nВикористовуйте httpOnly cookies для веб-додатків\nВ мобільних додатках використовуйте безпечне сховище\n\nОбробка expired токенів\ntypescriptimport axios from 'axios';\n\n// Перехоплювач для обробки 401 помилок\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    if (error.response?.status === 401) {\n      // Токен застарів, потрібно оновити\n      const newToken = await refreshToken();\n      // Повторити запит з новим токеном\n      error.config.headers.Authorization = `Bearer ${newToken}`;\n      return axios.request(error.config);\n    }\n    return Promise.reject(error);\n  }\n);\nПрава доступу\nAPI підтримує різні рівні доступу:\n\nUSER - базові операції читання\nMODERATOR - читання та модифікація контенту\nADMIN - повний доступ до всіх операцій\n\nПеревіряйте права користувача перед викликом API методів."],"names":[],"mappings":"8kBAKE,SAAA;aAEF,SAAA;oCAEG,SAAA;aAEH,SAAA;iDAEI,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}